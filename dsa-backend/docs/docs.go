// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/admin/activate/{user_id}": {
            "patch": {
                "security": [
                    {
                        "OAuth2Password": [
                            "admin"
                        ]
                    }
                ],
                "description": "Activate a user by setting their DisabledAt to a future date.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Activate a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User activated successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Success"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or validation failed",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "403": {
                        "description": "Cannot modify an admin user",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "500": {
                        "description": "Failed to activate user",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        },
        "/admin/archive/{user_id}": {
            "patch": {
                "security": [
                    {
                        "OAuth2Password": [
                            "admin"
                        ]
                    }
                ],
                "description": "Archive a user by setting their DisabledAt to the current time.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Archive a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User archived successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Success"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or validation failed",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "403": {
                        "description": "Cannot archive an admin user",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "500": {
                        "description": "Failed to archive user",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        },
        "/admin/delete/{user_id}": {
            "delete": {
                "security": [
                    {
                        "OAuth2Password": [
                            "admin"
                        ]
                    }
                ],
                "description": "Delete a user by their user ID. Cannot delete admin users.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Delete a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID of the user to be deleted",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Success"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or validation failed",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "403": {
                        "description": "Cannot delete an admin user",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "500": {
                        "description": "Failed to delete user",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        },
        "/admin/modify/{user_id}": {
            "patch": {
                "security": [
                    {
                        "OAuth2Password": [
                            "admin"
                        ]
                    }
                ],
                "description": "Modify user details such as name, password, email, and role.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Modify user details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID of the user to be modified",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User modification details",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/admin.ModifyUserProps"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User modified successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Success"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or validation failed",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "403": {
                        "description": "Cannot modify an admin user",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "500": {
                        "description": "Failed to modify user",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        },
        "/admin/register": {
            "post": {
                "security": [
                    {
                        "OAuth2Password": [
                            "admin"
                        ]
                    }
                ],
                "description": "Register a new user with the provided details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User registration details",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/admin.registerUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User registered successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Success"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or validation failed",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "409": {
                        "description": "User ID already exists",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "500": {
                        "description": "Failed to create user",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        },
        "/admin/users": {
            "get": {
                "security": [
                    {
                        "OAuth2Password": [
                            "admin"
                        ]
                    }
                ],
                "description": "Retrieve a list of all users with their details.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "List all users",
                "responses": {
                    "200": {
                        "description": "List of users retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/admin.ListUserResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to get user list",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        },
        "/problem/crud/create": {
            "put": {
                "security": [
                    {
                        "OAuth2Password": [
                            "grading"
                        ]
                    }
                ],
                "description": "Create a new lecture entry, accessible by manager and admin.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Update"
                ],
                "summary": "Create a new lecture entry",
                "parameters": [
                    {
                        "description": "Lecture entry details",
                        "name": "lectureEntry",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/problem.LectureEntryRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Lecture entry created successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Success"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        },
        "/problem/crud/create/{lectureid}/{problemid}": {
            "post": {
                "security": [
                    {
                        "OAuth2Password": [
                            "grading"
                        ]
                    }
                ],
                "description": "Register a new problem associated with a lecture",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Update"
                ],
                "summary": "Register a new problem",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Lecture ID",
                        "name": "lectureid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Problem ID",
                        "name": "problemid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Zip file contains problem resources",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Problem registered successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Success"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        },
        "/problem/crud/delete/{lectureid}": {
            "delete": {
                "security": [
                    {
                        "OAuth2Password": [
                            "grading"
                        ]
                    }
                ],
                "description": "Delete an existing lecture entry, accessible by manager and admin.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Update"
                ],
                "summary": "Delete an existing lecture entry",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Lecture ID",
                        "name": "lectureid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Lecture entry deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Success"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        },
        "/problem/crud/delete/{lectureid}/{problemid}": {
            "delete": {
                "security": [
                    {
                        "OAuth2Password": [
                            "grading"
                        ]
                    }
                ],
                "description": "delete a problem entry by lecture ID and problem ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Update"
                ],
                "summary": "delete problem entry",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Lecture ID",
                        "name": "lectureid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Problem ID",
                        "name": "problemid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Problem deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Success"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "404": {
                        "description": "Problem not found",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        },
        "/problem/crud/update/{lectureid}": {
            "patch": {
                "security": [
                    {
                        "OAuth2Password": [
                            "grading"
                        ]
                    }
                ],
                "description": "Update an existing lecture entry, accessible by manager and admin.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Update"
                ],
                "summary": "Update an existing lecture entry",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Lecture ID",
                        "name": "lectureid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Lecture entry details",
                        "name": "lectureEntry",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/problem.LectureEntryRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Lecture entry updated successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Success"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        },
        "/problem/fetch/detail/{lectureid}/{problemid}": {
            "get": {
                "security": [
                    {
                        "OAuth2Password": [
                            "me"
                        ]
                    }
                ],
                "description": "Get detailed information about a specific problem within a lecture.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fetch"
                ],
                "summary": "Get problem detail",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Lecture ID",
                        "name": "lectureid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Problem ID",
                        "name": "problemid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/util.ProblemDetail"
                        }
                    },
                    "400": {
                        "description": "invalid request",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "404": {
                        "description": "problem not found",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "500": {
                        "description": "failed to get problem",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        },
        "/problem/fetch/list": {
            "get": {
                "security": [
                    {
                        "OAuth2Password": [
                            "me"
                        ]
                    }
                ],
                "description": "get all lecture entries, each containing its problem entries. When you don't have scopes \"grading\" or \"admin\", you will only see lecture entries that are published.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fetch"
                ],
                "summary": "list all problem entry, nested in lecture entry.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/util.LectureEntry"
                            }
                        }
                    },
                    "500": {
                        "description": "failed to get lecture entries",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        },
        "/problem/fetch/requiredfiles": {
            "get": {
                "security": [
                    {
                        "OAuth2Password": [
                            "me"
                        ]
                    }
                ],
                "description": "Get a list of required files for each lecture, including problem-specific files and a report template.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fetch"
                ],
                "summary": "List required files for each lecture",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/problem.ListRequiredFilesResponse"
                        }
                    },
                    "500": {
                        "description": "failed to get lecture list",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        },
        "/problem/judge/batch/{lectureid}": {
            "post": {
                "security": [
                    {
                        "OAuth2Password": [
                            "grading"
                        ]
                    }
                ],
                "description": "This endpoint allows instructors to request grading for all problems in a specific lecture entry in a single request.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Submit"
                ],
                "summary": "Request batched grading requests for all problems in a specific lecture entry.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Lecture ID",
                        "name": "lectureid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "userid",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Submission Timestamp, epoch seconds (e.g., 1764464361)",
                        "name": "ts",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Zip file containing all files user submitted",
                        "name": "zipfile",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Batched grading requests registered successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Success"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "404": {
                        "description": "No problems found for the given lecture ID",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "500": {
                        "description": "Failed to register grading request",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        },
        "/problem/judge/{lectureid}/{problemid}": {
            "post": {
                "security": [
                    {
                        "OAuth2Password": [
                            "grading"
                        ]
                    }
                ],
                "description": "request a grading request, which is compiling program codes, and executes all test cases. note that the submission timestamp is specified by the user (manager or admin), and the target user ID (e.g., student) is also specified by the user.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Submit"
                ],
                "summary": "Request grading",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Lecture ID",
                        "name": "lectureid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Problem ID",
                        "name": "problemid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User ID targeted for grading",
                        "name": "userid",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Submission Timestamp, epoch seconds (e.g., 1764464361)",
                        "name": "ts",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "file"
                        },
                        "collectionFormat": "csv",
                        "description": "Files to be graded",
                        "name": "files",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Grading request registered successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Success"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "404": {
                        "description": "Problem not found",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        },
        "/problem/result/grading/list/{lectureid}": {
            "get": {
                "security": [
                    {
                        "OAuth2Password": [
                            "grading"
                        ]
                    }
                ],
                "description": "List grading results for a specific lecture.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Result"
                ],
                "summary": "List Grading Results for a Specific Lecture",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "The ID of the lecture to retrieve grading results for.",
                        "name": "lectureid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/problem.GradingListOutput"
                        }
                    },
                    "400": {
                        "description": "Invalid request\"\t\"No users found",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "401": {
                        "description": "Failed to get user info",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "500": {
                        "description": "Failed to get user list\"\t\"Failed to get grading results\"\t\"Failed to get lecture info\"\t\"Inconsistent data: user not found\"\t\"Inconsistent data: user not found in detail assembly",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        },
        "/problem/result/grading/summary/{lectureid}/{userid}": {
            "get": {
                "security": [
                    {
                        "OAuth2Password": [
                            "grading"
                        ]
                    }
                ],
                "description": "Get detailed information about a specific grading result.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Result"
                ],
                "summary": "Get Grading Result Detail",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Lecture ID",
                        "name": "lectureid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "userid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/problem.GradingDetailOutput"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "401": {
                        "description": "Failed to get user info",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "404": {
                        "description": "Grading result not found",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "500": {
                        "description": "Failed to get grading result\"\t\"Failed to get lecture info\"\t\"Failed to get problem info\"\t\"Inconsistent data: user info missing\"\t\"File location not found\"\t\"Failed to fetch uploaded files\"\t\"Failed to read build stdout\"\t\"Failed to read build stderr\"\t\"Failed to read judge stdout\"\t\"Failed to read judge stderr",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        },
        "/problem/result/validation/detail/{id}": {
            "get": {
                "security": [
                    {
                        "OAuth2Password": [
                            "me"
                        ]
                    }
                ],
                "description": "Get detailed information about a specific validation result.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Result"
                ],
                "summary": "Get Validation Result Detail",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Validation Result ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/problem.DetailOutput"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "401": {
                        "description": "Failed to get user info",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "404": {
                        "description": "Validation result not found",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "500": {
                        "description": "Failed to get validation result\"\t\"File location not found\"\t\"Failed to fetch uploaded files\"\t\"Failed to read build stdout\"\t\"Failed to read build stderr\"\t\"Failed to read judge stdout\"\t\"Failed to read judge stderr",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        },
        "/problem/result/validation/list": {
            "get": {
                "security": [
                    {
                        "OAuth2Password": [
                            "grading"
                        ]
                    }
                ],
                "description": "List validation results (not detailed, just summary) for the current user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Result"
                ],
                "summary": "List Validation Results for Current User",
                "parameters": [
                    {
                        "minimum": 0,
                        "type": "integer",
                        "format": "int64",
                        "default": 15000000,
                        "description": "The anchor ID received in the previous request.",
                        "name": "anchor",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "next",
                            "prev"
                        ],
                        "type": "string",
                        "default": "next",
                        "description": "The direction to fetch results. Use 'next' to get older results and 'prev' to get newer results.",
                        "name": "direction",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/problem.ListingOutput"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "401": {
                        "description": "Failed to get user info",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "500": {
                        "description": "Failed to get lecture entries\"\t\"Failed to get validation results",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        },
        "/problem/result/validation/{id}": {
            "get": {
                "security": [
                    {
                        "OAuth2Password": [
                            "me"
                        ]
                    }
                ],
                "description": "Get summary information about a specific validation result.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Result"
                ],
                "summary": "Get Validation Result Summary",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Validation Result ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/problem.ValidationResult"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "401": {
                        "description": "Failed to get user info",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "404": {
                        "description": "Validation result not found",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "500": {
                        "description": "Failed to get validation result",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        },
        "/problem/validate/batch/{lectureid}": {
            "post": {
                "security": [
                    {
                        "OAuth2Password": [
                            "me"
                        ]
                    }
                ],
                "description": "This endpoint allows users to request validation for all problems within a specific lecture.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Submit"
                ],
                "summary": "Request validation for all problems in a specific lecture entry.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Lecture ID",
                        "name": "lectureid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Zip file containing all program codes you're submitting",
                        "name": "zipfile",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Batch validation requests registered successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Success"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "404": {
                        "description": "No problems found for the given lecture ID",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "500": {
                        "description": "Failed to register batch validation requests",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        },
        "/problem/validate/{lectureid}/{problemid}": {
            "post": {
                "security": [
                    {
                        "OAuth2Password": [
                            "me"
                        ]
                    }
                ],
                "description": "request a validation request, which is just compiling program codes, and executes some simple test cases.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Submit"
                ],
                "summary": "Request validation",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Lecture ID",
                        "name": "lectureid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Problem ID",
                        "name": "problemid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "file"
                        },
                        "collectionFormat": "csv",
                        "description": "Files to validate",
                        "name": "files",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Validation request registered successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Success"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        },
        "/user/login": {
            "post": {
                "description": "User login with user ID and password. Returns a JWT token if successful.",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "tags": [
                    "User"
                ],
                "summary": "User Login",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "username",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Password",
                        "name": "password",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful. Returns a JWT token.",
                        "schema": {
                            "$ref": "#/definitions/user.userLoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request. This error occurs if the user ID or password is missing or incorrect.",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error. This error occurs if there is an issue with the database or password hashing.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/logout": {
            "post": {
                "security": [
                    {
                        "OAuth2Password": [
                            "me"
                        ]
                    }
                ],
                "description": "Logout user and invalidate JWT token",
                "tags": [
                    "User"
                ],
                "summary": "Logout user",
                "responses": {
                    "200": {
                        "description": "Logout successful",
                        "schema": {
                            "$ref": "#/definitions/response.Success"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/me": {
            "get": {
                "security": [
                    {
                        "OAuth2Password": [
                            "me"
                        ]
                    }
                ],
                "description": "Get current user information from JWT token",
                "tags": [
                    "User"
                ],
                "summary": "Get current user information",
                "responses": {
                    "200": {
                        "description": "Current user information",
                        "schema": {
                            "$ref": "#/definitions/user.userResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "admin.ListUserResponse": {
            "type": "object",
            "properties": {
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/admin.UserInfo"
                    }
                }
            }
        },
        "admin.ModifyUserProps": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "maxLength": 30,
                    "minLength": 1
                },
                "password": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 8
                },
                "role": {
                    "type": "string",
                    "enum": [
                        "admin",
                        "manager",
                        "student"
                    ]
                }
            }
        },
        "admin.UserInfo": {
            "type": "object",
            "properties": {
                "archived": {
                    "type": "boolean"
                },
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "admin.registerUserRequest": {
            "type": "object",
            "required": [
                "name",
                "password",
                "role",
                "user_id"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "maxLength": 30,
                    "minLength": 1
                },
                "password": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 8
                },
                "role": {
                    "type": "string",
                    "enum": [
                        "admin",
                        "manager",
                        "student"
                    ]
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "problem.DetailOutput": {
            "type": "object",
            "properties": {
                "build_logs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/problem.DetailedTaskLog"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "judge_logs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/problem.DetailedTaskLog"
                    }
                },
                "lecture_id": {
                    "type": "integer"
                },
                "lecture_title": {
                    "type": "string"
                },
                "memory_kb": {
                    "type": "integer"
                },
                "problem_id": {
                    "type": "integer"
                },
                "problem_title": {
                    "type": "string"
                },
                "result_id": {
                    "type": "integer"
                },
                "submission_ts": {
                    "type": "integer"
                },
                "test_files": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/util.FileData"
                    }
                },
                "time_ms": {
                    "type": "integer"
                },
                "ts": {
                    "type": "integer"
                },
                "uploaded_files": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/util.FileData"
                    }
                },
                "user_id": {
                    "type": "string"
                },
                "user_name": {
                    "type": "string"
                }
            }
        },
        "problem.DetailedTaskLog": {
            "type": "object",
            "properties": {
                "command": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "exit_code": {
                    "type": "integer"
                },
                "expected_exit_code": {
                    "type": "integer"
                },
                "expected_stderr": {
                    "description": "base64 encoded, compressed with gzip",
                    "type": "string"
                },
                "expected_stdout": {
                    "description": "base64 encoded, compressed with gzip",
                    "type": "string"
                },
                "memory_kb": {
                    "type": "integer"
                },
                "result_id": {
                    "type": "integer"
                },
                "stderr": {
                    "description": "base64 encoded, compressed with gzip",
                    "type": "string"
                },
                "stdin": {
                    "description": "base64 encoded, compressed with gzip",
                    "type": "string"
                },
                "stdout": {
                    "description": "base64 encoded, compressed with gzip",
                    "type": "string"
                },
                "test_case_id": {
                    "type": "integer"
                },
                "time_ms": {
                    "type": "integer"
                }
            }
        },
        "problem.FileGroup": {
            "type": "object",
            "properties": {
                "files": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/util.FileData"
                    }
                },
                "id": {
                    "type": "integer"
                }
            }
        },
        "problem.GradingDetailOutput": {
            "type": "object",
            "properties": {
                "deadline": {
                    "type": "integer"
                },
                "detail_list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/problem.GradingDetailPerProblem"
                    }
                },
                "file_groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/problem.FileGroup"
                    }
                },
                "lecture_id": {
                    "type": "integer"
                },
                "lecture_title": {
                    "type": "string"
                },
                "test_files_per_problem": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/problem.TestFilesPerProblem"
                    }
                },
                "user_id": {
                    "type": "string"
                },
                "user_name": {
                    "type": "string"
                }
            }
        },
        "problem.GradingDetailPerProblem": {
            "type": "object",
            "properties": {
                "build_logs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/problem.DetailedTaskLog"
                    }
                },
                "file_group_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "judge_logs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/problem.DetailedTaskLog"
                    }
                },
                "memory_kb": {
                    "type": "integer"
                },
                "problem_id": {
                    "type": "integer"
                },
                "problem_title": {
                    "type": "string"
                },
                "request_user_id": {
                    "type": "string"
                },
                "request_user_name": {
                    "type": "string"
                },
                "result_id": {
                    "type": "integer"
                },
                "submission_ts": {
                    "type": "integer"
                },
                "time_ms": {
                    "type": "integer"
                },
                "ts": {
                    "type": "integer"
                }
            }
        },
        "problem.GradingListOutput": {
            "type": "object",
            "properties": {
                "detail": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/problem.UserGradingResult"
                    }
                },
                "lecture_info": {
                    "$ref": "#/definitions/util.LectureEntry"
                }
            }
        },
        "problem.GradingResultPerProblem": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "memory_kb": {
                    "type": "integer"
                },
                "problem_id": {
                    "type": "integer"
                },
                "result_id": {
                    "type": "integer"
                },
                "submission_ts": {
                    "type": "integer"
                },
                "time_ms": {
                    "type": "integer"
                }
            }
        },
        "problem.LectureEntryRequest": {
            "type": "object",
            "required": [
                "deadline",
                "id",
                "start_date",
                "title"
            ],
            "properties": {
                "deadline": {
                    "type": "string",
                    "default": "2025-12-01T10:00:00+09:00"
                },
                "id": {
                    "type": "integer",
                    "default": 0
                },
                "start_date": {
                    "type": "string",
                    "default": "2025-10-01T10:00:00+09:00"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "problem.ListRequiredFilesResponse": {
            "type": "object",
            "properties": {
                "list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/problem.RequiredFiles"
                    }
                }
            }
        },
        "problem.ListingOutput": {
            "type": "object",
            "properties": {
                "lecture_info": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/util.LectureEntry"
                    }
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/problem.ValidationResult"
                    }
                }
            }
        },
        "problem.RequiredFiles": {
            "type": "object",
            "properties": {
                "files": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "lecture_id": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "problem.TestFilesPerProblem": {
            "type": "object",
            "properties": {
                "files": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/util.FileData"
                    }
                },
                "problem_id": {
                    "type": "integer"
                }
            }
        },
        "problem.UserGradingResult": {
            "type": "object",
            "properties": {
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/problem.GradingResultPerProblem"
                    }
                },
                "user_id": {
                    "type": "string"
                },
                "user_name": {
                    "type": "string"
                }
            }
        },
        "problem.ValidationResult": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "lecture_id": {
                    "type": "integer"
                },
                "memory_kb": {
                    "type": "integer"
                },
                "problem_id": {
                    "type": "integer"
                },
                "result_id": {
                    "type": "integer"
                },
                "time_ms": {
                    "type": "integer"
                },
                "ts": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "string"
                },
                "user_name": {
                    "type": "string"
                }
            }
        },
        "response.Error": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "object",
                    "properties": {
                        "body": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "response.Success": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "user.userLoginResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "description": "DO NOT modify json name, 'access_token' is required in Swagger UI",
                    "type": "string"
                },
                "exp": {
                    "type": "integer"
                },
                "token_type": {
                    "description": "DO NOT modify json name, 'token_type' is required in Swagger UI",
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/user.userResponse"
                }
            }
        },
        "user.userResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "util.FileData": {
            "type": "object",
            "properties": {
                "compression": {
                    "description": "e.g., \"gzip\"",
                    "type": "string"
                },
                "data": {
                    "description": "base64 encoded data, compressed by gzip",
                    "type": "string"
                },
                "filename": {
                    "type": "string"
                },
                "original_size": {
                    "type": "integer"
                }
            }
        },
        "util.LectureEntry": {
            "type": "object",
            "properties": {
                "deadline": {
                    "type": "integer"
                },
                "lecture_id": {
                    "type": "integer"
                },
                "problems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/util.ProblemEntry"
                    }
                },
                "start_date": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "util.ProblemDetail": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "lecture_id": {
                    "type": "integer"
                },
                "memory_mb": {
                    "type": "integer"
                },
                "problem_id": {
                    "type": "integer"
                },
                "required_files": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "test_files": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/util.FileData"
                    }
                },
                "time_ms": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "util.ProblemEntry": {
            "type": "object",
            "properties": {
                "lecture_id": {
                    "type": "integer"
                },
                "problem_id": {
                    "type": "integer"
                },
                "registered_at": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "OAuth2Password": {
            "type": "oauth2",
            "flow": "password",
            "tokenUrl": "/api/user/login",
            "scopes": {
                "admin": "Grants any rights related to admin user",
                "manager": "Grants any rights related to manager user",
                "me": "Grants any rights related to the current user"
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.0.1",
	Host:             "localhost:8000",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "DSA Backend API",
	Description:      "This is the API for the DSA Backend application.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
