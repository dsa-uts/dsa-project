// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/login": {
            "post": {
                "description": "User login with user ID and password. Returns a JWT token if successful.",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "tags": [
                    "user"
                ],
                "summary": "User Login",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "username",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Password",
                        "name": "password",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful. Returns a JWT token.",
                        "schema": {
                            "$ref": "#/definitions/handler.userLoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request. This error occurs if the user ID or password is missing or incorrect.",
                        "schema": {
                            "$ref": "#/definitions/handler.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error. This error occurs if there is an issue with the database or password hashing.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/problem/create": {
            "put": {
                "security": [
                    {
                        "OAuth2Password": [
                            "grading"
                        ]
                    }
                ],
                "description": "Create a new lecture entry, accessible by manager and admin.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "problem"
                ],
                "summary": "Create a new lecture entry",
                "parameters": [
                    {
                        "description": "Lecture entry details",
                        "name": "lectureEntry",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.LectureEntryRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Lecture entry created successfully",
                        "schema": {
                            "$ref": "#/definitions/handler.RequestSuccess"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/handler.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handler.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/problem/delete/{lectureid}": {
            "delete": {
                "security": [
                    {
                        "OAuth2Password": [
                            "grading"
                        ]
                    }
                ],
                "description": "Delete an existing lecture entry, accessible by manager and admin.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "problem"
                ],
                "summary": "Delete an existing lecture entry",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Lecture ID",
                        "name": "lectureid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Lecture entry deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/handler.RequestSuccess"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/handler.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handler.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/problem/update/{lectureid}": {
            "patch": {
                "security": [
                    {
                        "OAuth2Password": [
                            "grading"
                        ]
                    }
                ],
                "description": "Update an existing lecture entry, accessible by manager and admin.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "problem"
                ],
                "summary": "Update an existing lecture entry",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Lecture ID",
                        "name": "lectureid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Lecture entry details",
                        "name": "lectureEntry",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.LectureEntryRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Lecture entry updated successfully",
                        "schema": {
                            "$ref": "#/definitions/handler.RequestSuccess"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/handler.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handler.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/me": {
            "get": {
                "security": [
                    {
                        "OAuth2Password": [
                            "me"
                        ]
                    }
                ],
                "description": "Get current user information from JWT token",
                "tags": [
                    "user"
                ],
                "summary": "Get current user information",
                "responses": {
                    "200": {
                        "description": "Current user information",
                        "schema": {
                            "$ref": "#/definitions/handler.userResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handler.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handler.ErrorResponse": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "object",
                    "properties": {
                        "body": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "handler.LectureEntryRequest": {
            "type": "object",
            "required": [
                "deadline",
                "id",
                "start_date",
                "title"
            ],
            "properties": {
                "deadline": {
                    "type": "string",
                    "default": "2025-12-01T10:00:00+09:00"
                },
                "id": {
                    "type": "integer",
                    "default": 0
                },
                "start_date": {
                    "type": "string",
                    "default": "2025-10-01T10:00:00+09:00"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "handler.RequestSuccess": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "handler.userLoginResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "description": "DO NOT modify json name, 'access_token' is required in Swagger UI",
                    "type": "string"
                },
                "exp": {
                    "type": "integer"
                },
                "token_type": {
                    "description": "DO NOT modify json name, 'token_type' is required in Swagger UI",
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/handler.userResponse"
                }
            }
        },
        "handler.userResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "OAuth2Password": {
            "type": "oauth2",
            "flow": "password",
            "tokenUrl": "/api/login",
            "scopes": {
                "admin": "Grants any rights related to admin user",
                "manager": "Grants any rights related to manager user",
                "me": "Grants any rights related to the current user"
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.0.1",
	Host:             "localhost:8000",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "DSA Backend API",
	Description:      "This is the API for the DSA Backend application.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
