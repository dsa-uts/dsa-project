basePath: /api
definitions:
  admin.ListUserResponse:
    properties:
      users:
        items:
          $ref: '#/definitions/admin.UserInfo'
        type: array
    type: object
  admin.ModifyUserProps:
    properties:
      email:
        type: string
      name:
        maxLength: 30
        minLength: 1
        type: string
      password:
        maxLength: 100
        minLength: 8
        type: string
      role:
        enum:
        - admin
        - manager
        - student
        type: string
    type: object
  admin.UserInfo:
    properties:
      archived:
        type: boolean
      email:
        type: string
      name:
        type: string
      role:
        type: string
      user_id:
        type: string
    type: object
  admin.registerUserRequest:
    properties:
      email:
        type: string
      name:
        maxLength: 30
        minLength: 1
        type: string
      password:
        maxLength: 100
        minLength: 8
        type: string
      role:
        enum:
        - admin
        - manager
        - student
        type: string
      user_id:
        type: string
    required:
    - name
    - password
    - role
    - user_id
    type: object
  problem.DetailOutput:
    properties:
      build_logs:
        items:
          $ref: '#/definitions/problem.DetailedTaskLog'
        type: array
      id:
        type: integer
      judge_logs:
        items:
          $ref: '#/definitions/problem.DetailedTaskLog'
        type: array
      lecture_id:
        type: integer
      lecture_title:
        type: string
      memory_kb:
        type: integer
      problem_id:
        type: integer
      problem_title:
        type: string
      result_id:
        type: integer
      submission_ts:
        type: integer
      test_files:
        items:
          $ref: '#/definitions/util.FileData'
        type: array
      time_ms:
        type: integer
      ts:
        type: integer
      uploaded_files:
        items:
          $ref: '#/definitions/util.FileData'
        type: array
      user_id:
        type: string
      user_name:
        type: string
    type: object
  problem.DetailedTaskLog:
    properties:
      command:
        type: string
      description:
        type: string
      exit_code:
        type: integer
      expected_exit_code:
        type: integer
      expected_stderr:
        description: base64 encoded, compressed with gzip
        type: string
      expected_stdout:
        description: base64 encoded, compressed with gzip
        type: string
      memory_kb:
        type: integer
      result_id:
        type: integer
      stderr:
        description: base64 encoded, compressed with gzip
        type: string
      stdin:
        description: base64 encoded, compressed with gzip
        type: string
      stdout:
        description: base64 encoded, compressed with gzip
        type: string
      test_case_id:
        type: integer
      time_ms:
        type: integer
    type: object
  problem.FileGroup:
    properties:
      files:
        items:
          $ref: '#/definitions/util.FileData'
        type: array
      id:
        type: integer
    type: object
  problem.GradingDetailOutput:
    properties:
      deadline:
        type: integer
      detail_list:
        items:
          $ref: '#/definitions/problem.GradingDetailPerProblem'
        type: array
      file_groups:
        items:
          $ref: '#/definitions/problem.FileGroup'
        type: array
      lecture_id:
        type: integer
      lecture_title:
        type: string
      test_files_per_problem:
        items:
          $ref: '#/definitions/problem.TestFilesPerProblem'
        type: array
      user_id:
        type: string
      user_name:
        type: string
    type: object
  problem.GradingDetailPerProblem:
    properties:
      build_logs:
        items:
          $ref: '#/definitions/problem.DetailedTaskLog'
        type: array
      file_group_id:
        type: integer
      id:
        type: integer
      judge_logs:
        items:
          $ref: '#/definitions/problem.DetailedTaskLog'
        type: array
      memory_kb:
        type: integer
      problem_id:
        type: integer
      problem_title:
        type: string
      request_user_id:
        type: string
      request_user_name:
        type: string
      result_id:
        type: integer
      submission_ts:
        type: integer
      time_ms:
        type: integer
      ts:
        type: integer
    type: object
  problem.GradingListOutput:
    properties:
      detail:
        items:
          $ref: '#/definitions/problem.UserGradingResult'
        type: array
      lecture_info:
        $ref: '#/definitions/util.LectureEntry'
    type: object
  problem.GradingResultPerProblem:
    properties:
      id:
        type: integer
      memory_kb:
        type: integer
      problem_id:
        type: integer
      result_id:
        type: integer
      submission_ts:
        type: integer
      time_ms:
        type: integer
    type: object
  problem.LectureEntryRequest:
    properties:
      deadline:
        default: "2025-12-01T10:00:00+09:00"
        type: string
      id:
        default: 0
        type: integer
      start_date:
        default: "2025-10-01T10:00:00+09:00"
        type: string
      title:
        type: string
    required:
    - deadline
    - id
    - start_date
    - title
    type: object
  problem.ListRequiredFilesResponse:
    properties:
      list:
        items:
          $ref: '#/definitions/problem.RequiredFiles'
        type: array
    type: object
  problem.ListingOutput:
    properties:
      lecture_info:
        items:
          $ref: '#/definitions/util.LectureEntry'
        type: array
      results:
        items:
          $ref: '#/definitions/problem.ValidationResult'
        type: array
    type: object
  problem.RequiredFiles:
    properties:
      files:
        items:
          type: string
        type: array
      lecture_id:
        type: integer
      title:
        type: string
    type: object
  problem.TestFilesPerProblem:
    properties:
      files:
        items:
          $ref: '#/definitions/util.FileData'
        type: array
      problem_id:
        type: integer
    type: object
  problem.UserGradingResult:
    properties:
      results:
        items:
          $ref: '#/definitions/problem.GradingResultPerProblem'
        type: array
      user_id:
        type: string
      user_name:
        type: string
    type: object
  problem.ValidationResult:
    properties:
      id:
        type: integer
      lecture_id:
        type: integer
      memory_kb:
        type: integer
      problem_id:
        type: integer
      result_id:
        type: integer
      time_ms:
        type: integer
      ts:
        type: integer
      user_id:
        type: string
      user_name:
        type: string
    type: object
  response.Error:
    properties:
      errors:
        properties:
          body:
            type: string
        type: object
    type: object
  response.Success:
    properties:
      message:
        type: string
    type: object
  user.userLoginResponse:
    properties:
      access_token:
        description: DO NOT modify json name, 'access_token' is required in Swagger
          UI
        type: string
      exp:
        type: integer
      token_type:
        description: DO NOT modify json name, 'token_type' is required in Swagger
          UI
        type: string
      user:
        $ref: '#/definitions/user.userResponse'
    type: object
  user.userResponse:
    properties:
      email:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  util.FileData:
    properties:
      compression:
        description: e.g., "gzip"
        type: string
      data:
        description: base64 encoded data, compressed by gzip
        type: string
      filename:
        type: string
      original_size:
        type: integer
    type: object
  util.LectureEntry:
    properties:
      deadline:
        type: integer
      lecture_id:
        type: integer
      problems:
        items:
          $ref: '#/definitions/util.ProblemEntry'
        type: array
      start_date:
        type: integer
      title:
        type: string
    type: object
  util.ProblemDetail:
    properties:
      description:
        type: string
      lecture_id:
        type: integer
      memory_mb:
        type: integer
      problem_id:
        type: integer
      required_files:
        items:
          type: string
        type: array
      test_files:
        items:
          $ref: '#/definitions/util.FileData'
        type: array
      time_ms:
        type: integer
      title:
        type: string
    type: object
  util.ProblemEntry:
    properties:
      lecture_id:
        type: integer
      problem_id:
        type: integer
      registered_at:
        type: integer
      title:
        type: string
    type: object
host: localhost:8000
info:
  contact: {}
  description: This is the API for the DSA Backend application.
  title: DSA Backend API
  version: 0.0.1
paths:
  /admin/activate/{user_id}:
    patch:
      description: Activate a user by setting their DisabledAt to a future date.
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User activated successfully
          schema:
            $ref: '#/definitions/response.Success'
        "400":
          description: Invalid request body or validation failed
          schema:
            $ref: '#/definitions/response.Error'
        "403":
          description: Cannot modify an admin user
          schema:
            $ref: '#/definitions/response.Error'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Failed to activate user
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - OAuth2Password:
        - admin
      summary: Activate a user
      tags:
      - Admin
  /admin/archive/{user_id}:
    patch:
      description: Archive a user by setting their DisabledAt to the current time.
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User archived successfully
          schema:
            $ref: '#/definitions/response.Success'
        "400":
          description: Invalid request body or validation failed
          schema:
            $ref: '#/definitions/response.Error'
        "403":
          description: Cannot archive an admin user
          schema:
            $ref: '#/definitions/response.Error'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Failed to archive user
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - OAuth2Password:
        - admin
      summary: Archive a user
      tags:
      - Admin
  /admin/modify/{user_id}:
    patch:
      description: Modify user details such as name, password, email, and role.
      parameters:
      - description: User ID of the user to be modified
        in: path
        name: user_id
        required: true
        type: string
      - description: User modification details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/admin.ModifyUserProps'
      produces:
      - application/json
      responses:
        "200":
          description: User modified successfully
          schema:
            $ref: '#/definitions/response.Success'
        "400":
          description: Invalid request body or validation failed
          schema:
            $ref: '#/definitions/response.Error'
        "403":
          description: Cannot modify an admin user
          schema:
            $ref: '#/definitions/response.Error'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Failed to modify user
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - OAuth2Password:
        - admin
      summary: Modify user details
      tags:
      - Admin
  /admin/register:
    post:
      consumes:
      - application/json
      description: Register a new user with the provided details.
      parameters:
      - description: User registration details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/admin.registerUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            $ref: '#/definitions/response.Success'
        "400":
          description: Invalid request body or validation failed
          schema:
            $ref: '#/definitions/response.Error'
        "409":
          description: User ID already exists
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Failed to create user
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - OAuth2Password:
        - admin
      summary: Register a new user
      tags:
      - Admin
  /admin/users:
    get:
      description: Retrieve a list of all users with their details.
      produces:
      - application/json
      responses:
        "200":
          description: List of users retrieved successfully
          schema:
            $ref: '#/definitions/admin.ListUserResponse'
        "500":
          description: Failed to get user list
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - OAuth2Password:
        - admin
      summary: List all users
      tags:
      - Admin
  /problem/crud/create:
    put:
      consumes:
      - application/json
      description: Create a new lecture entry, accessible by manager and admin.
      parameters:
      - description: Lecture entry details
        in: body
        name: lectureEntry
        required: true
        schema:
          $ref: '#/definitions/problem.LectureEntryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Lecture entry created successfully
          schema:
            $ref: '#/definitions/response.Success'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - OAuth2Password:
        - grading
      summary: Create a new lecture entry
      tags:
      - Update
  /problem/crud/create/{lectureid}/{problemid}:
    post:
      consumes:
      - multipart/form-data
      description: Register a new problem associated with a lecture
      parameters:
      - description: Lecture ID
        in: path
        name: lectureid
        required: true
        type: integer
      - description: Problem ID
        in: path
        name: problemid
        required: true
        type: integer
      - description: Zip file contains problem resources
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Problem registered successfully
          schema:
            $ref: '#/definitions/response.Success'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - OAuth2Password:
        - grading
      summary: Register a new problem
      tags:
      - Update
  /problem/crud/delete/{lectureid}:
    delete:
      consumes:
      - application/json
      description: Delete an existing lecture entry, accessible by manager and admin.
      parameters:
      - description: Lecture ID
        in: path
        name: lectureid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Lecture entry deleted successfully
          schema:
            $ref: '#/definitions/response.Success'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - OAuth2Password:
        - grading
      summary: Delete an existing lecture entry
      tags:
      - Update
  /problem/crud/delete/{lectureid}/{problemid}:
    delete:
      consumes:
      - application/json
      description: delete a problem entry by lecture ID and problem ID
      parameters:
      - description: Lecture ID
        in: path
        name: lectureid
        required: true
        type: integer
      - description: Problem ID
        in: path
        name: problemid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Problem deleted successfully
          schema:
            $ref: '#/definitions/response.Success'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.Error'
        "404":
          description: Problem not found
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - OAuth2Password:
        - grading
      summary: delete problem entry
      tags:
      - Update
  /problem/crud/update/{lectureid}:
    patch:
      consumes:
      - application/json
      description: Update an existing lecture entry, accessible by manager and admin.
      parameters:
      - description: Lecture ID
        in: path
        name: lectureid
        required: true
        type: integer
      - description: Lecture entry details
        in: body
        name: lectureEntry
        required: true
        schema:
          $ref: '#/definitions/problem.LectureEntryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Lecture entry updated successfully
          schema:
            $ref: '#/definitions/response.Success'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - OAuth2Password:
        - grading
      summary: Update an existing lecture entry
      tags:
      - Update
  /problem/fetch/detail/{lectureid}/{problemid}:
    get:
      description: Get detailed information about a specific problem within a lecture.
      parameters:
      - description: Lecture ID
        format: int64
        in: path
        name: lectureid
        required: true
        type: integer
      - description: Problem ID
        format: int64
        in: path
        name: problemid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.ProblemDetail'
        "400":
          description: invalid request
          schema:
            $ref: '#/definitions/response.Error'
        "404":
          description: problem not found
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: failed to get problem
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - OAuth2Password:
        - me
      summary: Get problem detail
      tags:
      - Fetch
  /problem/fetch/list:
    get:
      description: get all lecture entries, each containing its problem entries. When
        you don't have scopes "grading" or "admin", you will only see lecture entries
        that are published.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/util.LectureEntry'
            type: array
        "500":
          description: failed to get lecture entries
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - OAuth2Password:
        - me
      summary: list all problem entry, nested in lecture entry.
      tags:
      - Fetch
  /problem/fetch/requiredfiles:
    get:
      description: Get a list of required files for each lecture, including problem-specific
        files and a report template.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/problem.ListRequiredFilesResponse'
        "500":
          description: failed to get lecture list
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - OAuth2Password:
        - me
      summary: List required files for each lecture
      tags:
      - Fetch
  /problem/judge/{lectureid}/{problemid}:
    post:
      consumes:
      - multipart/form-data
      description: request a grading request, which is compiling program codes, and
        executes all test cases. note that the submission timestamp is specified by
        the user (manager or admin), and the target user ID (e.g., student) is also
        specified by the user.
      parameters:
      - description: Lecture ID
        in: path
        name: lectureid
        required: true
        type: integer
      - description: Problem ID
        in: path
        name: problemid
        required: true
        type: integer
      - description: User ID targeted for grading
        in: formData
        name: userid
        required: true
        type: string
      - description: Submission Timestamp, epoch seconds (e.g., 1764464361)
        in: formData
        name: ts
        required: true
        type: integer
      - collectionFormat: csv
        description: Files to be graded
        in: formData
        items:
          type: file
        name: files
        required: true
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: Grading request registered successfully
          schema:
            $ref: '#/definitions/response.Success'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.Error'
        "404":
          description: Problem not found
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - OAuth2Password:
        - grading
      summary: Request grading
      tags:
      - Submit
  /problem/judge/batch/{lectureid}:
    post:
      consumes:
      - multipart/form-data
      description: This endpoint allows instructors to request grading for all problems
        in a specific lecture entry in a single request.
      parameters:
      - description: Lecture ID
        in: path
        name: lectureid
        required: true
        type: integer
      - description: User ID
        in: formData
        name: userid
        required: true
        type: string
      - description: Submission Timestamp, epoch seconds (e.g., 1764464361)
        format: int64
        in: formData
        name: ts
        required: true
        type: integer
      - description: Zip file containing all files user submitted
        in: formData
        name: zipfile
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Batched grading requests registered successfully
          schema:
            $ref: '#/definitions/response.Success'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.Error'
        "404":
          description: No problems found for the given lecture ID
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Failed to register grading request
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - OAuth2Password:
        - grading
      summary: Request batched grading requests for all problems in a specific lecture
        entry.
      tags:
      - Submit
  /problem/result/grading/list/{lectureid}:
    get:
      description: List grading results for a specific lecture.
      parameters:
      - description: The ID of the lecture to retrieve grading results for.
        format: int64
        in: path
        name: lectureid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/problem.GradingListOutput'
        "400":
          description: "Invalid request\"\t\"No users found"
          schema:
            $ref: '#/definitions/response.Error'
        "401":
          description: Failed to get user info
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: "Failed to get user list\"\t\"Failed to get grading results\"\t\"Failed
            to get lecture info\"\t\"Inconsistent data: user not found\"\t\"Inconsistent
            data: user not found in detail assembly"
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - OAuth2Password:
        - grading
      summary: List Grading Results for a Specific Lecture
      tags:
      - Result
  /problem/result/grading/summary/{lectureid}/{userid}:
    get:
      description: Get detailed information about a specific grading result.
      parameters:
      - description: Lecture ID
        format: int64
        in: path
        name: lectureid
        required: true
        type: integer
      - description: User ID
        in: path
        name: userid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/problem.GradingDetailOutput'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.Error'
        "401":
          description: Failed to get user info
          schema:
            $ref: '#/definitions/response.Error'
        "404":
          description: Grading result not found
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: "Failed to get grading result\"\t\"Failed to get lecture info\"\t\"Failed
            to get problem info\"\t\"Inconsistent data: user info missing\"\t\"File
            location not found\"\t\"Failed to fetch uploaded files\"\t\"Failed to
            read build stdout\"\t\"Failed to read build stderr\"\t\"Failed to read
            judge stdout\"\t\"Failed to read judge stderr"
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - OAuth2Password:
        - grading
      summary: Get Grading Result Detail
      tags:
      - Result
  /problem/result/validation/{id}:
    get:
      description: Get summary information about a specific validation result.
      parameters:
      - description: Validation Result ID
        format: int64
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/problem.ValidationResult'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.Error'
        "401":
          description: Failed to get user info
          schema:
            $ref: '#/definitions/response.Error'
        "404":
          description: Validation result not found
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Failed to get validation result
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - OAuth2Password:
        - me
      summary: Get Validation Result Summary
      tags:
      - Result
  /problem/result/validation/detail/{id}:
    get:
      description: Get detailed information about a specific validation result.
      parameters:
      - description: Validation Result ID
        format: int64
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/problem.DetailOutput'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.Error'
        "401":
          description: Failed to get user info
          schema:
            $ref: '#/definitions/response.Error'
        "404":
          description: Validation result not found
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: "Failed to get validation result\"\t\"File location not found\"\t\"Failed
            to fetch uploaded files\"\t\"Failed to read build stdout\"\t\"Failed to
            read build stderr\"\t\"Failed to read judge stdout\"\t\"Failed to read
            judge stderr"
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - OAuth2Password:
        - me
      summary: Get Validation Result Detail
      tags:
      - Result
  /problem/result/validation/list:
    get:
      description: List validation results (not detailed, just summary) for the current
        user.
      parameters:
      - default: 15000000
        description: The anchor ID received in the previous request.
        format: int64
        in: query
        minimum: 0
        name: anchor
        type: integer
      - default: next
        description: The direction to fetch results. Use 'next' to get older results
          and 'prev' to get newer results.
        enum:
        - next
        - prev
        in: query
        name: direction
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/problem.ListingOutput'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.Error'
        "401":
          description: Failed to get user info
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: "Failed to get lecture entries\"\t\"Failed to get validation
            results"
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - OAuth2Password:
        - grading
      summary: List Validation Results for Current User
      tags:
      - Result
  /problem/validate/{lectureid}/{problemid}:
    post:
      consumes:
      - multipart/form-data
      description: request a validation request, which is just compiling program codes,
        and executes some simple test cases.
      parameters:
      - description: Lecture ID
        in: path
        name: lectureid
        required: true
        type: integer
      - description: Problem ID
        in: path
        name: problemid
        required: true
        type: integer
      - collectionFormat: csv
        description: Files to validate
        in: formData
        items:
          type: file
        name: files
        required: true
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: Validation request registered successfully
          schema:
            $ref: '#/definitions/response.Success'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - OAuth2Password:
        - me
      summary: Request validation
      tags:
      - Submit
  /problem/validate/batch/{lectureid}:
    post:
      consumes:
      - multipart/form-data
      description: This endpoint allows users to request validation for all problems
        within a specific lecture.
      parameters:
      - description: Lecture ID
        in: path
        name: lectureid
        required: true
        type: integer
      - description: Zip file containing all program codes you're submitting
        in: formData
        name: zipfile
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Batch validation requests registered successfully
          schema:
            $ref: '#/definitions/response.Success'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.Error'
        "404":
          description: No problems found for the given lecture ID
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Failed to register batch validation requests
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - OAuth2Password:
        - me
      summary: Request validation for all problems in a specific lecture entry.
      tags:
      - Submit
  /user/login:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: User login with user ID and password. Returns a JWT token if successful.
      parameters:
      - description: User ID
        in: formData
        name: username
        required: true
        type: string
      - description: Password
        in: formData
        name: password
        required: true
        type: string
      responses:
        "200":
          description: Login successful. Returns a JWT token.
          schema:
            $ref: '#/definitions/user.userLoginResponse'
        "400":
          description: Bad request. This error occurs if the user ID or password is
            missing or incorrect.
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Internal server error. This error occurs if there is an issue
            with the database or password hashing.
          schema:
            type: string
      summary: User Login
      tags:
      - User
  /user/logout:
    post:
      description: Logout user and invalidate JWT token
      responses:
        "200":
          description: Logout successful
          schema:
            $ref: '#/definitions/response.Success'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - OAuth2Password:
        - me
      summary: Logout user
      tags:
      - User
  /user/me:
    get:
      description: Get current user information from JWT token
      responses:
        "200":
          description: Current user information
          schema:
            $ref: '#/definitions/user.userResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - OAuth2Password:
        - me
      summary: Get current user information
      tags:
      - User
securityDefinitions:
  OAuth2Password:
    flow: password
    scopes:
      admin: Grants any rights related to admin user
      manager: Grants any rights related to manager user
      me: Grants any rights related to the current user
    tokenUrl: /api/user/login
    type: oauth2
swagger: "2.0"
