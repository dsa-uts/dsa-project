basePath: /api
definitions:
  problem.LectureEntryRequest:
    properties:
      deadline:
        default: "2025-12-01T10:00:00+09:00"
        type: string
      id:
        default: 0
        type: integer
      start_date:
        default: "2025-10-01T10:00:00+09:00"
        type: string
      title:
        type: string
    required:
    - deadline
    - id
    - start_date
    - title
    type: object
  problem.LectureEntryResponse:
    properties:
      deadline:
        type: string
      id:
        type: integer
      problems:
        items:
          $ref: '#/definitions/problem.ProblemEntryResponse'
        type: array
      start_date:
        type: string
      title:
        type: string
    type: object
  problem.ProblemDetailResponse:
    properties:
      description:
        type: string
      lecture_id:
        type: integer
      memory_mb:
        type: integer
      problem_id:
        type: integer
      required_files:
        items:
          type: string
        type: array
      time_ms:
        type: integer
      title:
        type: string
    type: object
  problem.ProblemEntryResponse:
    properties:
      lecture_id:
        type: integer
      problem_id:
        type: integer
      title:
        type: string
    type: object
  response.Error:
    properties:
      errors:
        properties:
          body:
            type: string
        type: object
    type: object
  response.Success:
    properties:
      message:
        type: string
    type: object
  user.userLoginResponse:
    properties:
      access_token:
        description: DO NOT modify json name, 'access_token' is required in Swagger
          UI
        type: string
      exp:
        type: integer
      token_type:
        description: DO NOT modify json name, 'token_type' is required in Swagger
          UI
        type: string
      user:
        $ref: '#/definitions/user.userResponse'
    type: object
  user.userResponse:
    properties:
      email:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
host: localhost:8000
info:
  contact: {}
  description: This is the API for the DSA Backend application.
  title: DSA Backend API
  version: 0.0.1
paths:
  /problem/crud/create:
    put:
      consumes:
      - application/json
      description: Create a new lecture entry, accessible by manager and admin.
      parameters:
      - description: Lecture entry details
        in: body
        name: lectureEntry
        required: true
        schema:
          $ref: '#/definitions/problem.LectureEntryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Lecture entry created successfully
          schema:
            $ref: '#/definitions/response.Success'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - OAuth2Password:
        - grading
      summary: Create a new lecture entry
      tags:
      - problem
  /problem/crud/create/{lectureid}/{problemid}:
    post:
      consumes:
      - multipart/form-data
      description: Register a new problem associated with a lecture
      parameters:
      - description: Lecture ID
        in: path
        name: lectureid
        required: true
        type: integer
      - description: Problem ID
        in: path
        name: problemid
        required: true
        type: integer
      - description: Zip file contains problem resources
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Problem registered successfully
          schema:
            $ref: '#/definitions/response.Success'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - OAuth2Password:
        - grading
      summary: Register a new problem
      tags:
      - problem
  /problem/crud/delete/{lectureid}:
    delete:
      consumes:
      - application/json
      description: Delete an existing lecture entry, accessible by manager and admin.
      parameters:
      - description: Lecture ID
        in: path
        name: lectureid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Lecture entry deleted successfully
          schema:
            $ref: '#/definitions/response.Success'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - OAuth2Password:
        - grading
      summary: Delete an existing lecture entry
      tags:
      - problem
  /problem/crud/delete/{lectureid}/{problemid}:
    delete:
      consumes:
      - application/json
      description: delete a problem entry by lecture ID and problem ID
      parameters:
      - description: Lecture ID
        in: path
        name: lectureid
        required: true
        type: integer
      - description: Problem ID
        in: path
        name: problemid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Problem deleted successfully
          schema:
            $ref: '#/definitions/response.Success'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.Error'
        "404":
          description: Problem not found
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - OAuth2Password:
        - grading
      summary: delete problem entry
      tags:
      - problem
  /problem/crud/update/{lectureid}:
    patch:
      consumes:
      - application/json
      description: Update an existing lecture entry, accessible by manager and admin.
      parameters:
      - description: Lecture ID
        in: path
        name: lectureid
        required: true
        type: integer
      - description: Lecture entry details
        in: body
        name: lectureEntry
        required: true
        schema:
          $ref: '#/definitions/problem.LectureEntryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Lecture entry updated successfully
          schema:
            $ref: '#/definitions/response.Success'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - OAuth2Password:
        - grading
      summary: Update an existing lecture entry
      tags:
      - problem
  /problem/fetch/detail/{lectureid}/{problemid}:
    get:
      description: Get detailed information about a specific problem within a lecture.
      parameters:
      - description: Lecture ID
        format: int64
        in: path
        name: lectureid
        required: true
        type: integer
      - description: Problem ID
        format: int64
        in: path
        name: problemid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/problem.ProblemDetailResponse'
        "400":
          description: invalid request
          schema:
            $ref: '#/definitions/response.Error'
        "404":
          description: problem not found
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: failed to get problem
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - OAuth2Password:
        - me
      summary: Get problem detail
      tags:
      - problem
  /problem/fetch/list:
    get:
      description: get all lecture entries, each containing its problem entries. When
        you don't have scopes "grading" or "admin", you will only see lecture entries
        that are published.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/problem.LectureEntryResponse'
            type: array
        "500":
          description: failed to get lecture entries
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - OAuth2Password:
        - me
      summary: list all problem entry, nested in lecture entry.
      tags:
      - problem
  /problem/judge/{lectureid}/{problemid}:
    post:
      consumes:
      - multipart/form-data
      description: request a grading request, which is compiling program codes, and
        executes all test cases. note that the submission timestamp is specified by
        the user (manager or admin), and the target user ID (e.g., student) is also
        specified by the user.
      parameters:
      - description: Lecture ID
        in: path
        name: lectureid
        required: true
        type: integer
      - description: Problem ID
        in: path
        name: problemid
        required: true
        type: integer
      - description: User ID targeted for grading
        in: formData
        name: userid
        required: true
        type: string
      - description: Submission Timestamp, epoch seconds (e.g., 1764464361)
        in: formData
        name: ts
        required: true
        type: integer
      - collectionFormat: csv
        description: Files to be graded
        in: formData
        items:
          type: file
        name: files
        required: true
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: Grading request registered successfully
          schema:
            $ref: '#/definitions/response.Success'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.Error'
        "404":
          description: Problem not found
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - OAuth2Password:
        - grading
      summary: Request grading
      tags:
      - problem
  /problem/judge/batch/{lectureid}:
    post:
      consumes:
      - multipart/form-data
      description: This endpoint allows instructors to request grading for all problems
        in a specific lecture entry in a single request.
      parameters:
      - description: Lecture ID
        in: path
        name: lectureid
        required: true
        type: integer
      - description: User ID
        in: formData
        name: userid
        required: true
        type: string
      - description: Submission Timestamp, epoch seconds (e.g., 1764464361)
        format: int64
        in: formData
        name: ts
        required: true
        type: integer
      - description: Zip file containing all files user submitted
        in: formData
        name: zipfile
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Batched grading requests registered successfully
          schema:
            $ref: '#/definitions/response.Success'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.Error'
        "404":
          description: No problems found for the given lecture ID
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Failed to register grading request
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - OAuth2Password:
        - grading
      summary: Request batched grading requests for all problems in a specific lecture
        entry.
      tags:
      - problem
  /problem/validate/{lectureid}/{problemid}:
    post:
      consumes:
      - multipart/form-data
      description: request a validation request, which is just compiling program codes,
        and executes some simple test cases.
      parameters:
      - description: Lecture ID
        in: path
        name: lectureid
        required: true
        type: integer
      - description: Problem ID
        in: path
        name: problemid
        required: true
        type: integer
      - collectionFormat: csv
        description: Files to validate
        in: formData
        items:
          type: file
        name: files
        required: true
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: Validation request registered successfully
          schema:
            $ref: '#/definitions/response.Success'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - OAuth2Password:
        - me
      summary: Request validation
      tags:
      - problem
  /problem/validate/batch/{lectureid}:
    post:
      consumes:
      - multipart/form-data
      description: This endpoint allows users to request validation for all problems
        within a specific lecture.
      parameters:
      - description: Lecture ID
        in: path
        name: lectureid
        required: true
        type: integer
      - description: Zip file containing all program codes you're submitting
        in: formData
        name: zipfile
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Batch validation requests registered successfully
          schema:
            $ref: '#/definitions/response.Success'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.Error'
        "404":
          description: No problems found for the given lecture ID
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Failed to register batch validation requests
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - OAuth2Password:
        - me
      summary: Request validation for all problems in a specific lecture entry.
      tags:
      - problem
  /user/login:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: User login with user ID and password. Returns a JWT token if successful.
      parameters:
      - description: User ID
        in: formData
        name: username
        required: true
        type: string
      - description: Password
        in: formData
        name: password
        required: true
        type: string
      responses:
        "200":
          description: Login successful. Returns a JWT token.
          schema:
            $ref: '#/definitions/user.userLoginResponse'
        "400":
          description: Bad request. This error occurs if the user ID or password is
            missing or incorrect.
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Internal server error. This error occurs if there is an issue
            with the database or password hashing.
          schema:
            type: string
      summary: User Login
      tags:
      - user
  /user/logout:
    post:
      description: Logout user and invalidate JWT token
      responses:
        "200":
          description: Logout successful
          schema:
            $ref: '#/definitions/response.Success'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - OAuth2Password:
        - me
      summary: Logout user
      tags:
      - user
  /user/me:
    get:
      description: Get current user information from JWT token
      responses:
        "200":
          description: Current user information
          schema:
            $ref: '#/definitions/user.userResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - OAuth2Password:
        - me
      summary: Get current user information
      tags:
      - user
securityDefinitions:
  OAuth2Password:
    flow: password
    scopes:
      admin: Grants any rights related to admin user
      manager: Grants any rights related to manager user
      me: Grants any rights related to the current user
    tokenUrl: /api/user/login
    type: oauth2
swagger: "2.0"
