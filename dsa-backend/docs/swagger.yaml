basePath: /api
definitions:
  handler.ErrorResponse:
    properties:
      errors:
        properties:
          body:
            type: string
        type: object
    type: object
  handler.LectureEntryRequest:
    properties:
      deadline:
        default: "2025-12-01T10:00:00+09:00"
        type: string
      id:
        default: 0
        type: integer
      start_date:
        default: "2025-10-01T10:00:00+09:00"
        type: string
      title:
        type: string
    required:
    - deadline
    - id
    - start_date
    - title
    type: object
  handler.RequestSuccess:
    properties:
      message:
        type: string
    type: object
  handler.userLoginResponse:
    properties:
      access_token:
        description: DO NOT modify json name, 'access_token' is required in Swagger
          UI
        type: string
      exp:
        type: integer
      token_type:
        description: DO NOT modify json name, 'token_type' is required in Swagger
          UI
        type: string
      user:
        $ref: '#/definitions/handler.userResponse'
    type: object
  handler.userResponse:
    properties:
      email:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
host: localhost:8000
info:
  contact: {}
  description: This is the API for the DSA Backend application.
  title: DSA Backend API
  version: 0.0.1
paths:
  /login:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: User login with user ID and password. Returns a JWT token if successful.
      parameters:
      - description: User ID
        in: formData
        name: username
        required: true
        type: string
      - description: Password
        in: formData
        name: password
        required: true
        type: string
      responses:
        "200":
          description: Login successful. Returns a JWT token.
          schema:
            $ref: '#/definitions/handler.userLoginResponse'
        "400":
          description: Bad request. This error occurs if the user ID or password is
            missing or incorrect.
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal server error. This error occurs if there is an issue
            with the database or password hashing.
          schema:
            type: string
      summary: User Login
      tags:
      - user
  /problem/create:
    put:
      consumes:
      - application/json
      description: Create a new lecture entry, accessible by manager and admin.
      parameters:
      - description: Lecture entry details
        in: body
        name: lectureEntry
        required: true
        schema:
          $ref: '#/definitions/handler.LectureEntryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Lecture entry created successfully
          schema:
            $ref: '#/definitions/handler.RequestSuccess'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - OAuth2Password:
        - grading
      summary: Create a new lecture entry
      tags:
      - problem
  /problem/delete/{lectureid}:
    delete:
      consumes:
      - application/json
      description: Delete an existing lecture entry, accessible by manager and admin.
      parameters:
      - description: Lecture ID
        in: path
        name: lectureid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Lecture entry deleted successfully
          schema:
            $ref: '#/definitions/handler.RequestSuccess'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - OAuth2Password:
        - grading
      summary: Delete an existing lecture entry
      tags:
      - problem
  /problem/update/{lectureid}:
    patch:
      consumes:
      - application/json
      description: Update an existing lecture entry, accessible by manager and admin.
      parameters:
      - description: Lecture ID
        in: path
        name: lectureid
        required: true
        type: integer
      - description: Lecture entry details
        in: body
        name: lectureEntry
        required: true
        schema:
          $ref: '#/definitions/handler.LectureEntryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Lecture entry updated successfully
          schema:
            $ref: '#/definitions/handler.RequestSuccess'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - OAuth2Password:
        - grading
      summary: Update an existing lecture entry
      tags:
      - problem
  /user/me:
    get:
      description: Get current user information from JWT token
      responses:
        "200":
          description: Current user information
          schema:
            $ref: '#/definitions/handler.userResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - OAuth2Password:
        - me
      summary: Get current user information
      tags:
      - user
securityDefinitions:
  OAuth2Password:
    flow: password
    scopes:
      admin: Grants any rights related to admin user
      manager: Grants any rights related to manager user
      me: Grants any rights related to the current user
    tokenUrl: /api/login
    type: oauth2
swagger: "2.0"
